openapi: "3.0.0"
info:
  title: "Bands Tour API"
  description: "Service to track where your favorite groups are going to play"
  version: 1.0.0
  contact: 
    name: "the developer"
    email: luiz.contes@hotmail.com
  license:
    name: Contes Software Development
    url: https://luizcontes.github.io/
servers:
  - url: https://tourneapi.herokuapp.com
  - url: http://localhost:8081

tags:
  - name: Bandas
    description: The Bands tours API
  - name: Locais
    description: Places to held events (under construction)
  - name: Eventos
    description: Events in which a specific band is playing in a 
      specific place (under construction)

paths:
  /bandas:
    get:
      tags:
        - Bandas
      summary: Gets a full list of bandas
      description: |
        A valid request will show a complete list of all bands contained in the API database
      content:
        application/json:
          schema:
            "#/components/schemas/Bandas"
      responses:
        '200':
          description: Returns a full list of bands
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Bandas"
    post:
      tags:
          - Bandas
      summary: Creates a band in the database
      description: Creates a new band record
      consumes:
      - application/json
      produces:
      - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bandas"
      responses:
        '201':
          description: Returns the record if the request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bandas"
        '400':
          description: Error Bad Request
  /bandas/{id}:
    get:
      tags:
        - Bandas
      summary: Gets a banda by it`s id
      description: Passing the bands id whitin the query request returs the bands record
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID required
          schema:
            type: integer
      responses:
        '200':
          description: Returns the record if the request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bandas"
        '400':
          description: Error Bad Request      
    put:
      tags:
        - Bandas
      summary: Updates a band by it`s id
      description: Updates a bands record by ID as a parameter in the query
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID required
          schema:
            type: integer
      consumes:
      - application/json
      produces:
      - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Banda"
            examples:
              Banda:
                value:
                  nome: metallica
                  genero: heavy metal
      responses:
        '200':
          description: Returns the record if the request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bandas"
        '400':
          description: Error Bad Request
        '404':
          description: Record not found.
  /locais:
    get:
      tags:
        - Locais
      summary: Gets a full list of places
      description: |
        A valid request will show a complete list of all places contained in the API database
      content:
        application/json:
          schema:
            "#/components/schemas/Locais"
      responses:
        '200':
          description: Returns a full list of places
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Locais"
    post:
      tags:
          - Locais
      summary: Creates a local in the database
      description: Creates a new local record
      consumes:
      - application/json
      produces:
      - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Local"
      responses:
        '201':
          description: Returns the record if the request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Locais"
        '400':
          description: Error Bad Request
  /locais/{id}:
    get:
      tags:
        - Locais
      summary: Gets a local by it`s id
      description: Passing the local`s` id whitin the query request returns the local`s` record
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID required
          schema:
            type: integer
      responses:
        '200':
          description: Returns the record if the request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Locais"
        '400':
          description: Error Bad Request      
    put:
      tags:
        - Locais
      summary: Updates a local by it`s id
      description: Updates a local record by passing the ID as a parameter in the query
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID required
          schema:
            type: integer
      consumes:
      - application/json
      produces:
      - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Local"
      responses:
        '200':
          description: Returns the record if the request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Locais"
        '400':
          description: Error Bad Request
        '404':
          description: Record not found.
  /eventos:
    get:
      tags:
        - Eventos
      summary: Gets a full list of events
      description: |
        A valid request will show a complete list of all events contained in the API database
      content:
        application/json:
          schema:
            "#/components/schemas/Evento"
      responses:
        '200':
          description: Returns a full list of events
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Eventos"
    post:
      tags:
          - Eventos
      summary: Creates a event in the database
      description: Creates a new event record
      consumes:
      - application/json
      produces:
      - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Evento"
      responses:
        '201':
          description: Returns the record if the request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Eventos"
        '400':
          description: Error Bad Request
  /eventos/{id}:
    get:
      tags:
        - Eventos
      summary: Gets a event by it`s id
      description: Passing the event`s` id whitin the query request returns the local`s` record
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID required
          schema:
            type: integer
      responses:
        '200':
          description: Returns the record if the request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Eventos"
        '400':
          description: Error Bad Request      
    put:
      tags:
        - Eventos
      summary: Updates a event by it`s id
      description: Updates a event record by passing the ID as a parameter in the query
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID required
          schema:
            type: integer
      consumes:
      - application/json
      produces:
      - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Evento"
      responses:
        '200':
          description: Returns the record if the request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Eventos"
        '400':
          description: Error Bad Request
        '404':
          description: Record not found.

components:
  schemas:
    Bandas:
      type: object
      properties:
        id:
          type: integer
          description: Auto incremented by de DB
        nome:
          type: string
          description: The band`s name
        genero: 
          type: string
          description: The band`s genre
      example:
        id: 1
        nome: metallica
        genero: metal
    Banda:
      type: object
      properties:
        nome:
          type: string
          description: The band`s name
        genero: 
          type: string
          description: The band`s genre
      example:
        nome: metallica
        genero: metal
    Locais:
      type: object
      properties:
        id:
          type: integer
          description: Auto incremented by de DB
        nome:
          type: string
          description: The locals`s name
        genero: 
          type: string
          description: The locals`s address
      example:
        id: 1
        nome: portimao expo center
        morada: rua da macieira, 25
    Local:
      type: object
      properties:
        nome:
          type: string
          description: The local`s name
        genero: 
          type: string
          description: The local`s address
      example:
        nome: tavira
        morada: rua direita, 5
    Eventos:
      type: object
      properties:
        id:
          type: integer
          description: Auto incremented by de DB
        nome:
          type: string
          description: The event`s name
        genero: 
          type: string
          description: The event`s date
      example:
        id_evento: 3
        nome: boom
        data: 2025-07-24
        banda: silverchair
        genero: grunge
        local: silves praca central
        morada: rua do centro s/n
    Evento:
      type: object
      properties:
        nome:
          type: string
          description: The event`s name
        data: 
          type: string
          description: The data`s when the event is happening
      example:
        nome: rock in faro
        data: 2022-07-19
        id_banda: 2
        id_local: 4